import axios from 'axios';

// メッセージの型定義
interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
}

// API レスポンスの型定義
interface ApiResponse {
  data: string;
}

// AIクラスの型定義
class AI {
  private apiUrl: string;
  private headers: { [key: string]: string };
  private conversationHistory: { [key: string]: Array<Message> };
  public model: string;
  private conversationId: string; // 会話の ID を管理するプロパティ

  // 利用可能なモデルのリスト
  private static availableModels: string[] = [
    'gpt-4o',
    'claude-sonnet-3.5',
    'gemini-pro',
    'blackboxai'
  ];

  constructor(model: string = 'blackboxai') {
    if (!AI.availableModels.includes(model)) {
      throw new Error(`Invalid model specified. Available models are: ${AI.availableModels.join(', ')}`);
    }

    this.apiUrl = 'https://www.blackbox.ai/api/chat';
    this.headers = {
      'Content-Type': 'application/json',
      // 必要に応じて他のヘッダーを追加
    };
    this.conversationHistory = {};
    this.model = model; // モデルを指定できるようにする
    this.conversationId = this.generateConversationId(); // 会話の ID を自動生成
  }

  async sendMessage(content: string): Promise<string> {
    if (!this.conversationHistory[this.conversationId]) {
      this.conversationHistory[this.conversationId] = [];
    }

    const message: Message = { id: this.conversationId, content, role: 'user' };
    this.conversationHistory[this.conversationId].push(message);

    const payload = this.createPayload();

    try {
      const response = await axios.post<ApiResponse>(this.apiUrl, payload, { headers: this.headers });

      // レスポンスを ApiResponse 型として扱う
      const data = response.data;
      const cleanedResponse = data.data.replace(/Generated by BLACKBOX\.AI, try unlimited chat https:\/\/www\.blackbox\.ai\n\n/g, '');
      const assistantMessage: Message = { id: `response-${Date.now()}`, content: cleanedResponse, role: 'assistant' };
      this.conversationHistory[this.conversationId].push(assistantMessage);
      return assistantMessage.content;
    } catch (error) {
      this.handleError(error);
    }
  }

  private createPayload() {
    return {
      model: this.model,
      messages: this.conversationHistory[this.conversationId],
    };
  }

  private handleError(error: unknown): never {
    console.error('Error communicating with Blackbox.ai:', error);
    throw new Error('An error occurred while sending the message.');
  }

  // 会話の ID を自動生成する関数
  private generateConversationId(): string {
    return Math.random().toString(36).substring(2, 15); // ランダムな文字列を生成
  }
}

export default AI;